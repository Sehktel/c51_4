(ns c51cc.lexer)
(require '[clojure.string :as str]
         '[c51cc.logger :as log])

(declare tokenize-expression
         tokenize)

;; –¢–∏–ø—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
(def void-keyword {:type :type-keyword :value "void"})
(def int-keyword {:type :type-keyword :value "int"})
(def char-keyword {:type :type-keyword :value "char"})
(def signed-keyword {:type :type-keyword :value "signed"})
(def unsigned-keyword {:type :type-keyword :value "unsigned"})

;; –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
(def if-keyword {:type :control-keyword :value "if"})
(def else-keyword {:type :control-keyword :value "else"})
(def for-keyword {:type :control-keyword :value "for"})
(def while-keyword {:type :control-keyword :value "while"})
(def return-keyword {:type :control-keyword :value "return"})

;; –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ main
(def main-keyword {:type :main-keyword :value "main"})

;; –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –º–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
(def interrupt-keyword {:type :c51-keyword :value "interrupt"})
(def sfr-keyword {:type :c51-keyword :value "sfr"})
(def sbit-keyword {:type :c51-keyword :value "sbit"})
(def using-keyword {:type :c51-keyword :value "using"})

;; –°–∫–æ–±–∫–∏
(def open-round-bracket {:type :bracket :value "("})
(def close-round-bracket {:type :bracket :value ")"})
(def open-curly-bracket {:type :bracket :value "{"})
(def close-curly-bracket {:type :bracket :value "}"})
(def open-square-bracket {:type :bracket :value "["})
(def close-square-bracket {:type :bracket :value "]"})

;; –û–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
(def greater {:type :comparison-operator :value ">"})
(def less {:type :comparison-operator :value "<"})
(def greater-equal {:type :comparison-operator :value ">="})
(def less-equal {:type :comparison-operator :value "<="})
(def not-equal {:type :comparison-operator :value "!="})

;; –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è
(def equal {:type :assignment-operator :value "="})
(def and-equal {:type :assignment-operator :value "&="})
(def or-equal {:type :assignment-operator :value "|="})
(def xor-equal {:type :assignment-operator :value "^="})

;; –ë–∏—Ç–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
(def and-bitwise {:type :bitwise-operator :value "&"})
(def or-bitwise {:type :bitwise-operator :value "|"})
(def xor-bitwise {:type :bitwise-operator :value "^"})
(def bitwise-not {:type :bitwise-operator :value "~"})

;; –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
(def semicolon {:type :separator :value ";"})
(def comma {:type :separator :value ","})
(def dot {:type :separator :value "."})
(def colon {:type :separator :value ":"})
;;(def hash {:type :separator :value "#"})

;; –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
(def plus {:type :math-operator :value "+"})
(def minus {:type :math-operator :value "-"})
(def multiply {:type :math-operator :value "*"})
(def divide {:type :math-operator :value "/"})
(def modulo {:type :math-operator :value "%"})

;; –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
(def or-logical {:type :logical-operator :value "||"})
(def and-logical {:type :logical-operator :value "&&"})
(def equal-logical {:type :logical-operator :value "=="})
(def not-equal-logical {:type :logical-operator :value "!="})
(def not-logical {:type :logical-operator :value "!"})

;; –ß–∏—Å–ª–∞
(def int-number {:type :number :value 0})
(def hex-number {:type :number :value 0x00})

;; –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
(def identifier {:type :identifier :value ""})

;; –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
(defn tokenize [input]
  ;; –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ —Ç–æ–∫–µ–Ω—ã
  (let [token-pattern #">=|<=|==|!=|&&|\|\||&=|\|=|\^=|!|\w+|[(){}\[\];:=<>&|^~+\-*/%,.]|0x[0-9A-Fa-f]+|\d+"
        tokens (re-seq token-pattern input)]
    (if (= (count tokens) 1)
      (let [token (first tokens)]
        (cond
          ;; –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
          (= token "void") [{:type :type-keyword :value "void"}]
          (= token "int") [{:type :type-keyword :value "int"}]
          (= token "char") [{:type :type-keyword :value "char"}]
          (= token "signed") [{:type :type-keyword :value "signed"}]
          (= token "unsigned") [{:type :type-keyword :value "unsigned"}]

          ;; –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
          (= token "if") [{:type :control-keyword :value "if"}]
          (= token "else") [{:type :control-keyword :value "else"}]
          (= token "for") [{:type :control-keyword :value "for"}]
          (= token "while") [{:type :control-keyword :value "while"}]
          (= token "return") [{:type :control-keyword :value "return"}]

          ;; –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ main
          (= token "main") [{:type :main-keyword :value "main"}]

          ;; –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –º–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
          (= token "interrupt") [{:type :c51-keyword :value "interrupt"}]
          (= token "sfr") [{:type :c51-keyword :value "sfr"}]
          (= token "sbit") [{:type :c51-keyword :value "sbit"}]
          (= token "using") [{:type :c51-keyword :value "using"}]

          ;; –°–∫–æ–±–∫–∏
          (= token "(") [{:type :open-round-bracket :value "("}]
          (= token ")") [{:type :close-round-bracket :value ")"}]
          (= token "{") [{:type :open-curly-bracket :value "{"}]
          (= token "}") [{:type :close-curly-bracket :value "}"}]
          (= token "[") [{:type :open-square-bracket :value "["}]
          (= token "]") [{:type :close-square-bracket :value "]"}]

          ;; –û–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
          (= token ">") [{:type :comparison-operator :value ">"}]
          (= token "<") [{:type :comparison-operator :value "<"}]
          (= token ">=") [{:type :comparison-operator :value ">="}]
          (= token "<=") [{:type :comparison-operator :value "<="}]
          (= token "!=") [{:type :comparison-operator :value "!="}]

          ;; –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è
          (= token "&=") [{:type :assignment-operator :value "&="}]
          (= token "|=") [{:type :assignment-operator :value "|="}]
          (= token "^=") [{:type :assignment-operator :value "^="}]
          (= token "=") [{:type :assignment-operator :value "="}]

          ;; –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
          (= token "||") [{:type :logical-operator :value "||"}]
          (= token "&&") [{:type :logical-operator :value "&&"}]
          (= token "!") [{:type :logical-operator :value "!"}]
          (= token "==") [{:type :logical-operator :value "=="}]

          ;; –ë–∏—Ç–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
          (= token "&") [{:type :bitwise-operator :value "&"}]
          (= token "|") [{:type :bitwise-operator :value "|"}]
          (= token "^") [{:type :bitwise-operator :value "^"}]
          (= token "~") [{:type :bitwise-operator :value "~"}]

          ;; –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
          (= token ";") [{:type :separator :value ";"}]
          (= token ",") [{:type :separator :value ","}]
          (= token ".") [{:type :separator :value "."}]
          (= token ":") [{:type :separator :value ":"}]
          
          ;; –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
          (= token "+") [{:type :math-operator :value "+"}]
          (= token "-") [{:type :math-operator :value "-"}]
          (= token "*") [{:type :math-operator :value "*"}]
          (= token "/") [{:type :math-operator :value "/"}]
          (= token "%") [{:type :math-operator :value "%"}]
          
          ;; –ß–∏—Å–ª–∞
          (re-matches #"^\d+$" token) 
          [{:type :int-number :value (Integer/parseInt token)}]
          
          (re-matches #"^0x[0-9A-Fa-f]+$" token)
          [{:type :hex-number :value (Integer/parseInt (subs token 2) 16)}]
          
          ;; –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
          (re-matches #"^[a-zA-Z_][a-zA-Z0-9_]*$" token)
          [{:type :identifier :value token}]
          
          :else nil))
      
      ;; –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
      (vec (remove nil? (mapcat tokenize tokens))))))

;; ;; –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
;; (defn tokenize-expression [input]
;; ;;   (let [tokens (re-seq #"\w+|[(){}\[\];=<>&,]+|0x[0-9A-Fa-f]+|\d+" input)]
;; ;;     (vec (remove nil? (apply concat (mapv tokenize tokens))))))
;;   (let [tokens (re-seq #"\s+|\w+|[(){}\[\];=<>&,]+|0x[0-9A-Fa-f]+|\d+" input)]
;;     (vec (remove nil? (apply concat (mapv tokenize (filter #(not (re-matches #"\s+" %)) tokens)))))))

(comment
  (tokenize-expression "int main() { return 0; }")
  ;;üìò –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:
  ;;–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–Ω–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ - –ª–µ–∫—Å–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–ª–µ–∫—Å–∏–Ω–≥), –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤.
  ;;üß† –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏:
  ;;–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ #"\w+|[(){}\[\];=<>&,]+|0x[0-9A-Fa-f]+|\d+" —Ä–∞–∑–±–∏–≤–∞–µ—Ç –≤—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ —Ç–æ–∫–µ–Ω—ã:
  ;; \w+: –°–ª–æ–≤–∞ (–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã)
  ;; [(){}\[\];=<>&,]+: –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
  ;; 0x[0-9A-Fa-f]+: –®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã–µ —á–∏—Å–ª–∞
  ;; \d+: –î–µ—Å—è—Ç–∏—á–Ω—ã–µ —á–∏—Å–ª–∞
  ;; re-seq –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
  ;; mapv tokenize –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é tokenize –∫ –∫–∞–∂–¥–æ–º—É —Ç–æ–∫–µ–Ω—É, –ø—Ä–µ–≤—Ä–∞—â–∞—è —Å—ã—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
)

