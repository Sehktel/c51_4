(ns c51cc.lexer)
(require '[clojure.string :as str]
         '[c51cc.logger :as log])

(declare tokenize-expression
         tokenize)

(def void-keyword {:type :keyword :value "void"})
(def int-keyword {:type :keyword :value "int"})
(def char-keyword {:type :keyword :value "char"})
(def signed-keyword {:type :keyword :value "signed"})
(def unsigned-keyword {:type :keyword :value "unsigned"})
(def if-keyword {:type :keyword :value "if"})
(def else-keyword {:type :keyword :value "else"})
(def for-keyword {:type :keyword :value "for"})
(def while-keyword {:type :keyword :value "while"})
(def return-keyword {:type :keyword :value "return"})
(def main-keyword {:type :keyword :value "main"})
(def interrupt-keyword {:type :keyword :value "interrupt"})
(def sfr-keyword {:type :keyword :value "sfr"})
(def sbit-keyword {:type :keyword :value "sbit"})
(def bit-keyword {:type :keyword :value "bit"})
(def open-round-bracket {:type :bracket :value "("})
(def close-round-bracket {:type :bracket :value ")"})
(def open-curly-bracket {:type :bracket :value "{"})
(def close-curly-bracket {:type :bracket :value "}"})
(def open-square-bracket {:type :bracket :value "["})
(def close-square-bracket {:type :bracket :value "]"})
(def equal {:type :operator :value "="})
(def greater {:type :operator :value ">"})
(def less {:type :operator :value "<"})
(def greater-equal {:type :operator :value ">="})
(def less-equal {:type :operator :value "<="})
(def not-equal {:type :operator :value "!="})
(def and-equal {:type :operator :value "&="})
(def or-equal {:type :operator :value "|="})
(def and-bitwise {:type :operator :value "&&"})
(def or-bitwise {:type :operator :value "||"})
(def semicolon {:type :operator :value ";"})
(def comma {:type :operator :value ","})
(def dot {:type :operator :value "."})
(def colon {:type :operator :value ":"})
;;(def hash {:type :operator :value "#"})
(def plus {:type :operator :value "+"})
(def minus {:type :operator :value "-"})
(def asterisk {:type :operator :value "*"})
(def slash {:type :operator :value "/"})
(def percent {:type :operator :value "%"})
(def tilde {:type :operator :value "~"})
(def pipe {:type :operator :value "|"})
(def ampersand {:type :operator :value "&"})
(def caret {:type :operator :value "^"})
(def exclamation {:type :operator :value "!"})

(def int-number {:type :int-number :value 0})
(def hex-number {:type :hex-number :value 0})
(def identifier {:type :identifier :value ""})

;; –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
(defn tokenize [input]
  (let [tokens (re-seq #"\w+|[(){}\[\];=<>&,]+|0x[0-9A-Fa-f]+|\d+" input)]
    (if (= (count tokens) 1)
      (cond
        ;; –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        (= input "int") [int-keyword]
        (= input "char") [char-keyword]
        (= input "signed") [signed-keyword]
        (= input "unsigned") [unsigned-keyword]
        (= input "void") [void-keyword]
        (= input "if") [if-keyword]
        (= input "else") [else-keyword]
        (= input "for") [for-keyword]
        (= input "while") [while-keyword]
        (= input "return") [return-keyword]
        (= input "main") [main-keyword]
        (= input "interrupt") [interrupt-keyword]
        (= input "sfr") [sfr-keyword]
        (= input "sbit") [sbit-keyword]
        (= input "bit") [bit-keyword]
        
        ;; –°–∫–æ–±–∫–∏ –∫–∞–∫ keywords
        (= input "(") [open-round-bracket]
        (= input ")") [close-round-bracket]
        (= input "{") [open-curly-bracket]
        (= input "}") [close-curly-bracket]
        (= input "[") [open-square-bracket]
        (= input "]") [close-square-bracket]
        
        ;; –û–ø–µ—Ä–∞—Ç–æ—Ä—ã
        (= input "=") [equal]
        (= input ">") [greater]
        (= input "<") [less]
        (= input ">=") [greater-equal]
        (= input "&&") [and-bitwise]
        (= input "||") [or-bitwise]
        (= input "&=") [and-equal]
        (= input "|=") [or-equal]
        (= input ";") [semicolon]
        (= input ",") [comma]
        
        ;; –ß–∏—Å–ª–∞ –∫–∞–∫ –∫–∞—Ä—Ç—ã
        (re-matches #"^\d+$" input) 
        [{:type :int-number :value (Integer/parseInt input)}]
        
        (re-matches #"^0x[0-9A-Fa-f]+$" input)
        [{:type :hex-number :value (Integer/parseInt (subs input 2) 16)}]
        
        ;; –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∫–∞–∫ –∫–∞—Ä—Ç—ã
        (re-matches #"^[a-zA-Z_][a-zA-Z0-9_]*$" input)
        [{:type :identifier :value input}]
        
        :else nil)
      
      ;; –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
      (tokenize-expression input))))

;; –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
(defn tokenize-expression [input]
  (let [tokens (re-seq #"\w+|[(){}\[\];=<>&,]+|0x[0-9A-Fa-f]+|\d+" input)]
    (vec (remove nil? (mapv tokenize tokens)))))

(comment
  (tokenize-expression "int main() { return 0; }")
  ;;üìò –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:
  ;;–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–Ω–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ - –ª–µ–∫—Å–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–ª–µ–∫—Å–∏–Ω–≥), –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤.
  ;;üß† –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏:
  ;;–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ #"\w+|[(){}\[\];=<>&,]+|0x[0-9A-Fa-f]+|\d+" —Ä–∞–∑–±–∏–≤–∞–µ—Ç –≤—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ —Ç–æ–∫–µ–Ω—ã:
  ;; \w+: –°–ª–æ–≤–∞ (–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã)
  ;; [(){}\[\];=<>&,]+: –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
  ;; 0x[0-9A-Fa-f]+: –®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã–µ —á–∏—Å–ª–∞
  ;; \d+: –î–µ—Å—è—Ç–∏—á–Ω—ã–µ —á–∏—Å–ª–∞
  ;; re-seq –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
  ;; mapv tokenize –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é tokenize –∫ –∫–∞–∂–¥–æ–º—É —Ç–æ–∫–µ–Ω—É, –ø—Ä–µ–≤—Ä–∞—â–∞—è —Å—ã—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
)

