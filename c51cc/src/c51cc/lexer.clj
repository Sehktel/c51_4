(ns c51cc.lexer)

;; –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
(defn tokenize [input]
  (let [tokens (re-seq #"\w+|[(){}\[\];=<>&,]+|0x[0-9A-Fa-f]+|\d+" input)]
    (if (= (count tokens) 1)
      ;; –î–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ - —Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞
      (cond
        ;; –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        (= input "int") [:int]
        (= input "char") [:char]
        (= input "signed") [:signed]
        (= input "unsigned") [:unsigned]
        (= input "void") [:void]
        (= input "if") [:if]
        (= input "else") [:else]
        (= input "for") [:for]
        (= input "while") [:while]
        (= input "return") [:return]
        (= input "main") [:main]
        (= input "interrupt") [:interrupt]
        (= input "sfr") [:sfr]
        (= input "sbit") [:sbit]
        (= input "bit") [:bit]
        
        ;; –°–∫–æ–±–∫–∏
        (= input "(") [:open-round-bracket]
        (= input ")") [:close-round-bracket]
        (= input "{") [:open-curly-bracket]
        (= input "}") [:close-curly-bracket]
        (= input "[") [:open-square-bracket]
        (= input "]") [:close-square-bracket]
        
        ;; –û–ø–µ—Ä–∞—Ç–æ—Ä—ã
        (= input "=") [:equal]
        (= input ">") [:greater]
        (= input "<") [:less]
        (= input ">=") [:greater-equal]
        (= input "&&") [:and]
        (= input "&=") [:and-equal]
        (= input ";") [:semicolon]
        (= input ",") [:comma]
        
        ;; –ß–∏—Å–ª–∞
        (re-matches #"^\d+$" input) 
        [{:type :int-number :value (Integer/parseInt input)}]
        
        (re-matches #"^0x[0-9A-Fa-f]+$" input)
        [{:type :hex-number :value (Integer/parseInt (subs input 2) 16)}]
        
        ;; –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
        (re-matches #"^[a-zA-Z_][a-zA-Z0-9_]*$" input)
        [{:type :identifier :value input}]
        
        :else nil)
      
      ;; –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º tokenize-expression
      (first (remove nil? (mapv tokenize tokens))))))

;; –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
(defn tokenize-expression [input]
  (let [tokens (re-seq #"\w+|[(){}\[\];=<>&,]+|0x[0-9A-Fa-f]+|\d+" input)]
    (remove nil? (mapv tokenize tokens))))

(comment
  (tokenize-expression "int main() { return 0; }")
  ;;üìò –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:
  ;;–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–Ω–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ - –ª–µ–∫—Å–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–ª–µ–∫—Å–∏–Ω–≥), –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤.
  ;;üß† –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏:
  ;;–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ #"\w+|[(){}\[\];=<>&,]+|0x[0-9A-Fa-f]+|\d+" —Ä–∞–∑–±–∏–≤–∞–µ—Ç –≤—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ —Ç–æ–∫–µ–Ω—ã:
  ;; \w+: –°–ª–æ–≤–∞ (–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã)
  ;; [(){}\[\];=<>&,]+: –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
  ;; 0x[0-9A-Fa-f]+: –®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã–µ —á–∏—Å–ª–∞
  ;; \d+: –î–µ—Å—è—Ç–∏—á–Ω—ã–µ —á–∏—Å–ª–∞
  ;; re-seq –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
  ;; mapv tokenize –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é tokenize –∫ –∫–∞–∂–¥–æ–º—É —Ç–æ–∫–µ–Ω—É, –ø—Ä–µ–≤—Ä–∞—â–∞—è —Å—ã—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
)

